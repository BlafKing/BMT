import os
import json
import shutil
import tempfile
import tkinter as tk
from tkinter import filedialog
import zipfile
from tqdm import tqdm
import sys
from collections import Counter
import time
import msvcrt
import ctypes


def window_to_front():
    ctypes.windll.user32.SetForegroundWindow(ctypes.windll.kernel32.GetConsoleWindow())


def select_var_files():
    root = tk.Tk()
    root.withdraw()
    file_paths = filedialog.askopenfilenames(filetypes=[("VAR Files", "*.var")])
    return file_paths


def display_selected_files(var_files):
    if len(var_files) > 0:
        print("Selected files:")
        for file in var_files:
            print(file)
        print(f"\n\nTotal files: {len(var_files)}")
    else:
        os.system('cls')
        print("No files selected. Exiting...")
        time.sleep(2.5)
        sys.exit(0)


def combine_var_files(file_paths, output_file, user_input_name, artist_name):
    combined_content_list = set()
    combined_dependencies = {}
    existing_files = set()
    highest_program_version = None

    with zipfile.ZipFile(output_file, 'w', zipfile.ZIP_DEFLATED) as zipf, tqdm(total=len(file_paths), desc="Merging Files") as pbar:
        for file_path in file_paths:
            temp_dir = tempfile.mkdtemp()
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)

            meta_file = os.path.join(temp_dir, "meta.json")
            with open(meta_file, 'r', encoding='utf-8') as f:
                meta_data = json.load(f)

            combined_content_list.update(meta_data["contentList"])

            for dep, dep_data in meta_data["dependencies"].items():
                combined_dependencies.setdefault(dep, {}).setdefault("dependencies", {}).update(dep_data["dependencies"])

            program_version = meta_data.get("programVersion")
            if program_version and (highest_program_version is None or program_version > highest_program_version):
                highest_program_version = program_version

            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    if file == "meta.json":
                        continue
                    file_path = os.path.join(root, file)
                    rel_path = os.path.relpath(file_path, temp_dir)

                    if rel_path in existing_files:
                        continue

                    existing_files.add(rel_path)
                    zipf.write(file_path, rel_path)

            shutil.rmtree(temp_dir)
            pbar.update(1)

    combined_content_list = sorted(combined_content_list)
    combined_dependencies = dict(sorted(combined_dependencies.items()))

    combined_meta_data = {
        "licenseType": "PC",
        "creatorName": artist_name,
        "packageName": user_input_name,
        "standardReferenceVersionOption": "Latest",
        "scriptReferenceVersionOption": "Exact",
        "description": "This package has been generated by using BlafKing's Merge Tool.",
        "credits": "",
        "instructions": "",
        "promotionalLink": "",
        "programVersion": highest_program_version,
        "contentList": combined_content_list,
        "dependencies": combined_dependencies,
        "customOptions": {"preloadMorphs": "false"},
        "hadReferenceIssues": "false",
        "referenceIssues": []
    }

    with zipfile.ZipFile(output_file, 'a', zipfile.ZIP_DEFLATED) as zipf:
        zipf.writestr("meta.json", json.dumps(combined_meta_data, indent=3))

    pbar.close()


def display_message():
    message = "BlafKing's .var Merge Tool (BMT)"
    terminal_width = shutil.get_terminal_size().columns
    centered_message = message.center(terminal_width)
    print(centered_message)
    input_prompt = "Press Enter to select the .var files you want to merge."
    centered_input_prompt = input_prompt.center(terminal_width)
    input(centered_input_prompt)


def end_message(final_output):
    message = "Merging completed successfully."
    terminal_width = shutil.get_terminal_size().columns
    centered_message = message.center(terminal_width)
    print(centered_message)

    saved_message = f"File has been saved to: {final_output}"
    centered_saved_message = saved_message.center(terminal_width)
    print(centered_saved_message)

    message = "Thank you for using my script!"
    centered_message = message.center(terminal_width)
    print(centered_message)


def prompt_options(artist_name, user_input_name, file_version, final_output):
    os.system('cls')
    display_selected_files(var_files)
    print(f"Final merged package: {final_output}\n\n")

    print("Options:")
    print("1. Change the artist name")
    print("2. Change the package name")
    print("3. Change the version number")
    print("4. Start the merging process")
    print("Please enter your choice: ", end='', flush=True)
    
    while True:
        try:
            if msvcrt.kbhit():
                option = msvcrt.getch().decode()
                print(option)
                break
        except UnicodeDecodeError:
            continue

    if option in ["1", "2", "3"]:
        if option == "1":
            prompt_message = "Enter the new artist name: "
            artist_name = input(prompt_message)
        elif option == "2":
            prompt_message = "Enter the new package name: "
            user_input_name = input(prompt_message).replace(" ", "_")
        elif option == "3":
            prompt_message = "Enter the new version number: "
            new_file_version = input(prompt_message)

            try:
                if '.' in new_file_version:
                    file_version = float(new_file_version)
                else:
                    file_version = int(new_file_version)
            except ValueError:
                print("Invalid input. Skipping version number change.")
                time.sleep(1.5)

        package_name = f"{artist_name}.{user_input_name}.{file_version}"
        final_output = os.path.normpath(os.path.join(os.path.dirname(output_file), package_name))
        if not final_output.endswith(".var"):
            final_output += ".var"
        
        prompt_options(artist_name, user_input_name, file_version, final_output)
    elif option == "4":
        return
    else:
        prompt_options(artist_name, user_input_name, file_version, final_output)


if __name__ == "__main__":
    display_message()

    var_files = select_var_files()
    os.system('cls')
    window_to_front()
    
    display_selected_files(var_files)
    print("\n\nPlease select a new save location & name for the final merged package")
    time.sleep(1)

    output_file = filedialog.asksaveasfilename(defaultextension=".var", filetypes=[("VAR Files", "*.var")])

    if not output_file:
        os.system('cls')
        print("No save location/name provided. Exiting...")
        time.sleep(2.5)
        sys.exit(0)

    artist_name_counts = Counter()
    for file_path in var_files:
        file_name = os.path.basename(file_path)
        artist_name = file_name.split(".")[0]
        artist_name_counts[artist_name] += 1

    artist = artist_name_counts.most_common(1)
    artist_name = artist[0][0] if artist else ""

    user_input_name = os.path.splitext(os.path.basename(output_file))[0].replace(" ", "_")
    file_version = "1"
    package_name = f"{artist_name}.{user_input_name}.{file_version}"
    final_output = os.path.normpath(os.path.join(os.path.dirname(output_file), package_name))
    if not final_output.endswith(".var"):
        final_output += ".var"

    os.system('cls')
    window_to_front()
    prompt_options(artist_name, user_input_name, file_version, final_output)
    
    os.system('cls')
    
    combine_var_files(var_files, final_output, user_input_name, artist_name)
    os.system('cls')
    end_message(final_output)
    window_to_front()
    input("")
    sys.exit(0)
